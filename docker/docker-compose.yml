version: '3.8'

# Define networks for isolation
networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
  db-network:
    driver: bridge

# Define volumes
volumes:
  postgres_data:
  redis_data:
  uploads:
  downloads:

services:
  # Frontend service
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: social-media-frontend
    restart: unless-stopped
    networks:
      - frontend-network
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run
      - /var/cache/nginx

  # Backend service
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: social-media-backend
    restart: unless-stopped
    networks:
      - frontend-network
      - backend-network
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/social_media
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=0
    volumes:
      - uploads:/app/uploads:rw
      - downloads:/app/downloads:rw
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: social-media-postgres
    restart: unless-stopped
    networks:
      - db-network
      - backend-network
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=social_media
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 1G
    security_opt:
      - no-new-privileges:true

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: social-media-redis
    restart: unless-stopped
    networks:
      - backend-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    command: ["redis-server", "--appendonly", "yes"]
