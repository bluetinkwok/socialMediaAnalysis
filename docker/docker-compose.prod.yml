version: '3.8'

# Define networks for isolation
networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
  db-network:
    driver: bridge

# Define volumes
volumes:
  postgres_data:
  redis_data:
  uploads:
  downloads:
  certs:

# Define secrets
secrets:
  redis_password:
    file: ./secrets/redis_password_prod.txt
  backend_api_key:
    file: ./secrets/backend_api_key.txt
  backend_jwt_secret:
    file: ./secrets/backend_jwt_secret.txt
  ssl_cert:
    file: ./secrets/ssl_cert.pem
  ssl_key:
    file: ./secrets/ssl_key.pem

services:
  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: social-media-nginx
    restart: unless-stopped
    networks:
      - frontend-network
    ports:
      - "443:443"
      - "80:80"
    depends_on:
      - frontend
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - certs:/etc/nginx/certs:ro
    secrets:
      - source: ssl_cert
        target: /etc/nginx/certs/ssl_cert.pem
      - source: ssl_key
        target: /etc/nginx/certs/ssl_key.pem
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
    security_opt:
      - no-new-privileges:true
      - seccomp=./security/seccomp-profile.json
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp
      - /var/run
      - /var/cache/nginx

  # Frontend service
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: social-media-frontend-prod
    restart: unless-stopped
    networks:
      - frontend-network
    expose:
      - "80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    security_opt:
      - no-new-privileges:true
      - seccomp=./security/seccomp-profile.json
      - apparmor=social-media-container
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
      - /var/run
      - /var/cache/nginx

  # Backend service
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: social-media-backend-prod
    restart: unless-stopped
    networks:
      - frontend-network
      - backend-network
    expose:
      - "8000"
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/social_media
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - DEBUG=0
      - ENVIRONMENT=production
    volumes:
      - uploads:/app/uploads:rw
      - downloads:/app/downloads:rw
    secrets:
      - source: backend_api_key
        target: /app/secrets/api_key
      - source: backend_jwt_secret
        target: /app/secrets/jwt_secret
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true
      - seccomp=./security/seccomp-profile.json
      - apparmor=social-media-container
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: social-media-postgres-prod
    restart: unless-stopped
    networks:
      - db-network
      - backend-network
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=social_media
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 1G
    security_opt:
      - no-new-privileges:true
      - seccomp=./security/seccomp-profile.json
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - FOWNER
      - SETGID
      - SETUID

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: social-media-redis-prod
    restart: unless-stopped
    networks:
      - backend-network
    volumes:
      - redis_data:/data
    secrets:
      - source: redis_password
        target: /run/secrets/redis_password
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
    security_opt:
      - no-new-privileges:true
      - seccomp=./security/seccomp-profile.json
    cap_drop:
      - ALL
