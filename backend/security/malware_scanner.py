"""
Malware Scanner

This module provides malware scanning functionality using ClamAV.
"""

import os
import logging
import asyncio
import socket
from typing import Tuple, Dict, Any, List, Optional

logger = logging.getLogger(__name__)

class ClamAVScanner:
    """ClamAV malware scanner"""
    
    def __init__(self, socket_path: str, timeout: int = 30):
        """
        Initialize the ClamAV scanner.
        
        Args:
            socket_path: Path to the ClamAV socket
            timeout: Timeout for scanning operations in seconds
        """
        self.socket_path = socket_path
        self.timeout = timeout
    
    async def check_status(self) -> bool:
        """
        Check if ClamAV is available and running.
        
        Returns:
            bool: True if ClamAV is available, False otherwise
        """
        try:
            if not os.path.exists(self.socket_path):
                logger.warning(f"ClamAV socket not found at {self.socket_path}")
                return False
            
            # Try to connect to the socket
            sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
            sock.settimeout(self.timeout)
            sock.connect(self.socket_path)
            
            # Send PING command
            sock.send(b"PING\n")
            response = sock.recv(1024).strip()
            sock.close()
            
            if response == b"PONG":
                logger.info("ClamAV is available and running")
                return True
            else:
                logger.warning(f"Unexpected response from ClamAV: {response}")
                return False
                
        except Exception as e:
            logger.error(f"Error checking ClamAV status: {str(e)}")
            return False
    
    async def scan_file(self, file_path: str) -> Tuple[bool, Dict[str, Any]]:
        """
        Scan a file for malware.
        
        Args:
            file_path: Path to the file to scan
            
        Returns:
            Tuple[bool, Dict[str, Any]]: (is_safe, scan_results)
        """
        if not os.path.exists(file_path):
            logger.error(f"File not found: {file_path}")
            return False, {"error": "File not found"}
        
        try:
            # Create a socket connection to ClamAV
            sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
            sock.settimeout(self.timeout)
            sock.connect(self.socket_path)
            
            # Send SCAN command
            command = f"SCAN {file_path}\n".encode()
            sock.send(command)
            
            # Read response
            response = sock.recv(4096).decode().strip()
            sock.close()
            
            # Parse response
            scan_result = self._parse_scan_result(response)
            
            # Determine if the file is safe
            is_safe = scan_result.get("status") == "OK"
            
            return is_safe, scan_result
            
        except Exception as e:
            logger.error(f"Error scanning file: {str(e)}")
            return False, {"error": f"Scan failed: {str(e)}"}
    
    def _parse_scan_result(self, response: str) -> Dict[str, Any]:
        """
        Parse the scan result from ClamAV.
        
        Args:
            response: Response from ClamAV
            
        Returns:
            Dict[str, Any]: Parsed scan result
        """
        try:
            # Expected format: "/path/to/file: OK" or "/path/to/file: VirusName FOUND"
            parts = response.split(": ", 1)
            if len(parts) != 2:
                return {"status": "ERROR", "details": "Invalid response format"}
            
            file_path, result = parts
            
            if result == "OK":
                return {"status": "OK", "details": "No threats found"}
            elif "FOUND" in result:
                threat = result.replace(" FOUND", "")
                return {"status": "INFECTED", "threat": threat, "details": f"Malware detected: {threat}"}
            else:
                return {"status": "ERROR", "details": f"Unknown result: {result}"}
                
        except Exception as e:
            logger.error(f"Error parsing scan result: {str(e)}")
            return {"status": "ERROR", "details": f"Failed to parse result: {str(e)}"}
